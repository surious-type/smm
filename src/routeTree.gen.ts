/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as PanelsRouteImport } from './routes/panels'
import { Route as NotesRouteImport } from './routes/notes'
import { Route as LogsRouteImport } from './routes/logs'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as TasksCreateRouteImport } from './routes/tasks/create'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PanelsRoute = PanelsRouteImport.update({
  id: '/panels',
  path: '/panels',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesRoute = NotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => rootRouteImport,
} as any)
const LogsRoute = LogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksCreateRoute = TasksCreateRouteImport.update({
  id: '/tasks/create',
  path: '/tasks/create',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/notes': typeof NotesRoute
  '/panels': typeof PanelsRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/tasks/create': typeof TasksCreateRoute
  '/tasks': typeof TasksIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/notes': typeof NotesRoute
  '/panels': typeof PanelsRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/tasks/create': typeof TasksCreateRoute
  '/tasks': typeof TasksIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/notes': typeof NotesRoute
  '/panels': typeof PanelsRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/tasks/create': typeof TasksCreateRoute
  '/tasks/': typeof TasksIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/logs'
    | '/notes'
    | '/panels'
    | '/settings'
    | '/users'
    | '/tasks/create'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/logs'
    | '/notes'
    | '/panels'
    | '/settings'
    | '/users'
    | '/tasks/create'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/logs'
    | '/notes'
    | '/panels'
    | '/settings'
    | '/users'
    | '/tasks/create'
    | '/tasks/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  LogsRoute: typeof LogsRoute
  NotesRoute: typeof NotesRoute
  PanelsRoute: typeof PanelsRoute
  SettingsRoute: typeof SettingsRoute
  UsersRoute: typeof UsersRoute
  TasksCreateRoute: typeof TasksCreateRoute
  TasksIndexRoute: typeof TasksIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/panels': {
      id: '/panels'
      path: '/panels'
      fullPath: '/panels'
      preLoaderRoute: typeof PanelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/create': {
      id: '/tasks/create'
      path: '/tasks/create'
      fullPath: '/tasks/create'
      preLoaderRoute: typeof TasksCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  LogsRoute: LogsRoute,
  NotesRoute: NotesRoute,
  PanelsRoute: PanelsRoute,
  SettingsRoute: SettingsRoute,
  UsersRoute: UsersRoute,
  TasksCreateRoute: TasksCreateRoute,
  TasksIndexRoute: TasksIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
